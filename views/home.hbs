<h1>tableau de bord</h1>

<div class="float-right">
  <img src="/tag.jpg" width="160">
</div>

<h2>mode</h2>
<form method="post" action="/nabd" class="d-inline"><input name="data" value='{"type":"mode","mode":"interactive"}' hidden><button type="submit">interactive</button></form>
<form method="post" action="/nabd" class="d-inline"><input name="data" value='{"type":"mode","mode":"idle"}' hidden><button type="submit">idle</button></form>
<form method="post" action="/nabd" class="d-inline"><input name="data" value='{"type":"wakeup"}' hidden><button type="submit">wakeup</button></form>
<form method="post" action="/nabd" class="d-inline"><input name="data" value='{"type":"sleep"}' hidden><button type="submit">sleep</button></form>

<h2>nabd gestalt</h2>

<div class="ob">
  <div id="gestalt">
    <div><span>state</span> : {state}</div>
    <div><span>uptime</span> : {uptime}</div>
    <div><span>connections</span> : {connections}</div>
    <div><span>hardware</span></div>
    <div><span>model</span> : {model}</div>
    <div><span>sound_card</span> : {sound_card}</div>
    <div><span>sound_input</span> : {sound_input}</div>
    <div><span>rfid</span> : {rfid}</div>
    <div><span>left_ear_status</span> : {left_ear_status}</div>
    <div><span>right_ear_status</span> : {right_ear_status}</div>
  </div>
</div>

<h2>operating system</h2>

<div class="ob">
  <div><span>platform, arch</span> : {{os.platform}}, {{os.arch}}</div>
  <div><span>type, release</span> : {{os.type}},  {{os.release}}</div>
  <div><span>freemem / totalmem</span> : {{os.freemem}} / {{os.totalmem}}</div>
  <div><span>cpus</span> : <pre>{{stringify os.cpus}}</pre></div>
</div>

<script>
  // https://www.inrhythm.com/one-directional-data-binding/

  // initialisation des variables template
  const quote_node = document.querySelector('#gestalt');
  const keys = quote_node.innerHTML.match(/\{([^}]+)\}/g);
  const data_blob = {};
  for(let i = 0; i < keys.length; i++) {
    const str = keys[i];
    keys[i] = str.substring(1, str.length - 1);
    data_blob[keys[i]] = "";
  }

  //proxy
  const quote_data = new Proxy(data_blob, {
    set: (target, property, value) => {
      target[property] = value;
      quote_node.render(data_blob);
    },
  });

  quote_node.template = quote_node.innerHTML;
  quote_node.render = function render(data) {
    this.innerHTML = this.template.replace(/\{\s?(\w+)\s?\}/g, (match, variable) => {
      return data[variable] || '';
    });
  };

  // mise à jour de l'état du nabaztag
  socket.on('connect', function() {
    console.log('connect');
    socket.emit('getGestalt');
  });

  socket.on('gestalt', function(data) {
    console.log('test');
    const dataObj = JSON.parse(data);
    Object.keys(dataObj).forEach(function(key) {
      if(key === 'uptime') dataObj[key] = helpers.toHHMMSS(dataObj[key]);
      if(key === 'hardware') {
        const hardware = dataObj[key];
        Object.keys(hardware).forEach(function(key) {
          quote_data[key] = hardware[key];
        });
      }
      else
        quote_data[key] = dataObj[key];
    });
  });

</script>